name: Android CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build and Deploy to Firebase
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup JDK 17
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      # Setup Gradle cache
      - name: Cache for gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Load google-services.json
      - name: Load Google Service file
        env:
          DATA: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo $DATA | base64 -di > app/google-services.json

      # Create keystore.properties file with secrets
      - name: Create keystore.properties
        run: |
          echo "SIGNING_KEYSTORE=release-key.jks" >> keystore.properties
          echo "SIGNING_KEYSTORE_PASSWORD=${{ secrets.SIGNING_KEYSTORE_PASSWORD }}" >> keystore.properties
          echo "SIGNING_KEY_ALIAS=${{ secrets.SIGNING_KEY_ALIAS }}" >> keystore.properties
          echo "SIGNING_KEY_PASSWORD=${{ secrets.SIGNING_KEY_PASSWORD }}" >> keystore.properties

      # Create local.properties with secrets
      - name: Create local.properties with secrets
        run: |
          echo "API_URL=${{ secrets.API_URL }}" >> local.properties
          echo "GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" >> local.properties
          echo "GOOGLE_DIRECTION_API_KEY=${{ secrets.GOOGLE_DIRECTION_API_KEY }}" >> local.properties

      # Export environment variables from keystore.properties
      - name: Set environment variables from keystore.properties
        run: |
          export SIGNING_KEYSTORE=$(grep 'SIGNING_KEYSTORE' keystore.properties | cut -d '=' -f2)
          export SIGNING_KEYSTORE_PASSWORD=$(grep 'SIGNING_KEYSTORE_PASSWORD' keystore.properties | cut -d '=' -f2)
          export SIGNING_KEY_ALIAS=$(grep 'SIGNING_KEY_ALIAS' keystore.properties | cut -d '=' -f2)
          export SIGNING_KEY_PASSWORD=$(grep 'SIGNING_KEY_PASSWORD' keystore.properties | cut -d '=' -f2)
        shell: bash

      # Grant execute permission to gradlew
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # Build APK release version
      - name: Build APK
        run: ./gradlew assembleRelease --stacktrace --info

      # Sign APK using signing key
      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEYSTORE }}
          alias: ${{ env.SIGNING_KEY_ALIAS }}
          keyStorePassword: ${{ env.SIGNING_KEYSTORE_PASSWORD }}
          keyPassword: ${{ env.SIGNING_KEY_PASSWORD }}

      # Deploy to Firebase App Distribution
      - name: Deploy to Firebase
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          token: ${{ secrets.FIREBASE_AUTH_TOKEN }}
          groups: testers
          file: ${{ steps.sign_app.outputs.signedReleaseFile }}
